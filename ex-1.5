Exercise 1.5.Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is 
using applicative-order evaluation or normal-order evaluation. He defines the following two procedures: 

(define (p) (p))
(define (test x y)
(if (= x 0)
0
y))

Then he evaluates the expression 
(test 0 (p))
What behavior will Ben observe with an interp
will he observe with an interpreter that uses no
the evaluation rule for the special form if is th
applicative order: The predicate expression is e
the consequent or the alternative expression.) 


Applicative-order:infinite loop,
when evaluates the (test 0 (p)),it will firstly call the (p),then will do 
the recursion with the (p)

Normal-order: 0 

(test 0 (p))

=

(if (= x 0)
  0
  (p))
  
= 0

